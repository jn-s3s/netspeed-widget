name: 📦 Build release executable file
on:
  workflow_dispatch:
jobs:
  build-from-tag-release:
    runs-on: windows-latest
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: ♻️ Restore build cache
        uses: actions/cache@v4
        id: build-cache
        with:
          path: dist
          key: build-dist-${{ runner.os }}-${{ hashFiles('build.py', 'src/**/*.py', 'requirements.txt', '!src/**/tests/**') }}
          restore-keys: |
            build-dist-${{ runner.os }}-
      - name: 📦 Install/Update pip
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
      - name: 🛠️ Run Build Script
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: python build.py
      - name: 📁 Check build output
        run: dir dist
      - name: 📋 Generate Simple Changelog
        id: changelog
        shell: bash
        run: |
          set -e
          git fetch --tags --force --prune

          NEW_TAG=${{ github.ref_name }}
          REPO=${{ github.repository }}

          # Previous tag along the same history as NEW_TAG
          PREV_TAG="$(git describe --tags --abbrev=0 "${NEW_TAG}^" 2>/dev/null || true)"

          echo "## 🧾 What's Changed" > RELEASE.md

          if [ -n "$PREV_TAG" ]; then
            # Get previous tag date in YYYY-MM-DD
            PREV_DATE=$(date -u -d "$(git log -1 --format=%aI $PREV_TAG)" +%Y-%m-%d)

            # Get PR numbers from commits between the two tags
            # Works with both squash merges like "Title (#123)" and merge commits "Merge pull request #123"
            mapfile -t PRS < <(
              git log --pretty=%s "${PREV_TAG}..${NEW_TAG}" \
              | sed -nE 's/.*\(#([0-9]+)\).*/\1/p; t; s/^Merge pull request #([0-9]+).*/\1/p' \
              | sort -un
            )

            if [[ ${#PRS[@]} -eq 0 ]]; then
              PREV_DATE="$(git show -s --format=%cI "${PREV_TAG}^{ }")"
              NEW_DATE="$(git show -s --format=%cI "${NEW_TAG}^{ }")"
              gh pr list \
                --repo "$REPO" \
                --state merged \
                --search "merged:>=$PREV_DATE merged:<$NEW_DATE" \
                --json title,number,author \
                --jq '.[] | "- \(.title) [#\(.number)](https://github.com/'"$REPO"'/pull/\(.number)) by @\(.author.login)"' \
                >> RELEASE.md
            else
              for n in "${PRS[@]}"; do
                gh pr view "$n" --repo "$REPO" --json title,number,author \
                  --jq '"- \(.title) [#\(.number)](https://github.com/'"$REPO"'/pull/\(.number)) by @\(.author.login)"'
              done >> RELEASE.md
            fi

            echo -e "\n## 🔗 Full Changelog\nhttps://github.com/${REPO}/compare/${PREV_TAG}...${NEW_TAG}" >> RELEASE.md
          else
            gh pr list \
              --repo "$REPO" \
              --state merged \
              --limit 20 \
              --json title,number,author \
              --jq '.[] | "- \(.title) [#\(.number)](https://github.com/'"$REPO"'/pull/\(.number)) by @\(.author.login)"' \
              >> RELEASE.md

            echo -e "\n## 🔗 Full Changelog\nhttps://github.com/${REPO}/releases/tag/${NEW_TAG}" >> RELEASE.md
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 📤 Upload GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: NetSpeed Widget ${{ github.ref_name }}
          body_path: RELEASE.md
          files: dist/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
